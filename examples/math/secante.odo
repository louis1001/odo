module math {
    double e = 2.718281828
    func abs(double x): double {
        if (x >= 0){
            return x
        }
        return -x
    }

    func exp(double x): double {
        return e ^ x
    }

    func error(double XrAct, double XrAnt): double {
        return abs((XrAct-XrAnt)/XrAct)
    }
}

int MAX_ITERS = 200

# I need to define a placeholder for the function at the moment
# Because I have no way of declaring an argument with function type.
# So even if the interpreter can handle it, the Semantic Analyzer doesn't
# know that the argument will be callable.

# TODO: Find a way of declaring variables with a function type.
#   what should be the syntax?
func fn(double x): double{}

func approx_raiz(double x0, double x1, double min_err=0.001): double {
    double px = x0
    double x = x1

    for (int i = 0; i < MAX_ITERS; i++) {
        writeln("-"*20)
        writeln("Iteracion ", i)

        double y = fn(x)
        double dy = (fn(px)-fn(x))/(px-x)
        px = x

        x = x - (y/dy)

        writeln("X: ", x)
        double curr_err = math::error(x, px)
        writeln("Error: ", curr_err)

        if curr_err < min_err {
            return x
        }

        writeln("\n\n")
    }

    write("Error! Numero maximo de iteraciones excedido.")
    return x
}

fn = func (double x) {
    return math::exp(-pow(x, 2))-x
}

double x = approx_raiz(-0.5, 3, 0.01)

#{ New function definition syntax proposal for function types.
double(int, int) div

div = func(int a, int b) {
    return a/b
}

a = func() {
    writeln("Hey")
}
}#

writeln("The result is = ", x)
