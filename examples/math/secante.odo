func get_error(double XrAct, double XrAnt): double {
    return abs((XrAct-XrAnt)/XrAct)
}

func abs(double x): double {
    return x > 0 ? x : -x
}

int MAX_ITERS = 200

# New way of aliasing function types
define <double:double> as linear_fn

func approx_raiz(double x0, double x1, linear_fn fn, double min_err=0.001): double {
    double px = x0
    double x = x1

    for (int i = 0; i < MAX_ITERS; i++) {
        writeln("-"*20)
        writeln("Iteracion ", i)

        double y = fn(x)
        double dy = (fn(px)-fn(x))/(px-x)
        px = x

        x = x - (y/dy)

        writeln("X: ", x)
        double curr_err = get_error(x, px)
        writeln("Error: ", curr_err)

        if curr_err < min_err {
            return x
        }

        writeln("\n\n")
    }

    write("Error! Numero maximo de iteraciones excedido.")
    return x
}

double x = approx_raiz(
    -0.5, 3,
    func (double x) {
        return math::exp(-pow(x, 2))-x
    },
    0.01
)

writeln("The result is = ", x)
